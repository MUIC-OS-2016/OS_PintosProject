			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Majeed Thaika 5680571
Kongsak Tipakornrojanakit 5680624
Pankaj Ahuja 5680004

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- static struct List sleep_threads
//- static struct List sleep_threads, begin_time, end_time

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

-We disable interrupt during timer_sleep(), because we need the threads to not interfere with each others' start and end times (no race conditions). The timer interrupt handler will remove any blocked threads, that passed its end time, from the sleeping threads list to the ready list.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

-We removed the "busy-waiting" loop (which will be taxing on the CPU resources), and replaced it with the block/unblock threads function given in thread.c, and check to see if any threads have passed its end time 'once in a while'.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

-We disable interrupts to stop any other threads from accessing other thread's start/end times, so we avoid race conditions easily.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

-Since we diabled interrupts in timer_sleep(), any timer interrupts that occer must either wait or get dropped.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

-We chose to use interrupt handlers, since using locks,etc , because we don't want to allow the threads in function timer_sleep() to sleep or yield (meaning we cannot use locks).


			 PRIORITY SCHEDULING
			 ===================

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

- List to keep threads waiting on current thread (because it is holding the lock - only direct waiting ones).

- The lock this thread is currently waiting for.

- List to keep maximum priority (based on donations) of each thread.

- List holding the number of threads waiting for this lock.

- List of all the indirect threads waiting for the current thread to free the lock (doesn't have to be directly waiting for the lock as well).

- List to keep original priority of each thread.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

- ADD DISCUSSED DIAGRAM HERE!!!

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

- Each time a lock/semaphore becomes available, we check if there is any waiting threads, then we loop through the waiting list (the list which the has threads waiting for the particular lock), and get the thread with highest 'maximum' priority (it tied, choice is arbitrary).

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

- First, the thread, which wants to acquire the lock, updates it target lock to the lock specified in lock_acquire() param. If the lock is free, it is acquired easily - but if it is being held by another thread, then the current thread is added to the waiting list of the lock keeper (and then if the lock keeper is waiting for any locks, then this thread is added to the indirect wait list of the lock keeper's waiting lock keeper and so on...). As it is being added to the donation lists, the maximum value is recomputed for ever lock keeper.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

-The lock is freed and the lock keeper will give his waiting list to the higher priority (HP) thread (to add to waiting elements of the lock keeper to the HP thread's waiting list). The previous lock keeper's max priority is recomputed and the HP thread will be given the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

- A possible race condition is when the priority of the variable is being calculated, we have to beware that the current values of the possible donations are the most recent - since it could be the case that the thread is interrupted while calculating priority, and so when it returns, it may no longer be accurate. We remedy this by turning off interrupts at the start of thread_set_priority(), and turning it back on at the end of the function. Note that using locks will not solve this problem because it does nothing to stop the interrupt handler from updating priorities.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

-Seems the most natural thing to do, since it solves the problem of deadlocks (when a higher priority thread is waiting for a lower priority one to release a lock) - and we also take care of the 'recursive' updating of the maximum priority of the threads.


			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

https://web.stanford.edu/class/cs140/projects/pintos/pintos_7.html#SEC131

- Use this eqn to calculate priority:
priority = PRI_MAX - (recent_cpu / 4) - (nice * 2)
If tied, use least recent_cpu one

- Use this eqn to calculate recent_cpu:
recent_cpu = (2*load_avg)/(2*load_avg + 1) * recent_cpu + nice,

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0     0   0   0   63  61  59     A
 4     4   0   0   62  61  59     A
 8     8   0   0   61  61  59     B
12     8   4   0   61  60  59     A
16     12  4   0   60  60  59     B
20     12  8   0   60  59  59     A
24     16  8   0   59  59  59     C
28     16  8   4   59  59  58     B 
32     16  12  4   59  58  58     A
36     20  12  4   58  58  58     C 

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

- If there are multiple priorities which are equal, I chose to use the thread
this had the least recent_cpu one because that might make all threads utilize 
the CPU in a more equal fashion rather than one thread always hogging the CPU.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

- Every threads have a better chance to run and utilize CPU

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?










			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
